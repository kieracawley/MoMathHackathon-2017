{
  "_args": [
    [
      {
        "raw": "electron-log@https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
        "scope": null,
        "escapedName": "electron-log",
        "name": "electron-log",
        "rawSpec": "https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
        "spec": "https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
        "type": "remote"
      },
      "/Users/kiera/Desktop/math-square"
    ]
  ],
  "_from": "electron-log@https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
  "_id": "electron-log@2.2.7",
  "_inCache": true,
  "_location": "/electron-log",
  "_phantomChildren": {},
  "_requested": {
    "raw": "electron-log@https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
    "scope": null,
    "escapedName": "electron-log",
    "name": "electron-log",
    "rawSpec": "https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
    "spec": "https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
  "_shasum": "8da0d2586b53b175392ae6b91dc510a67c195341",
  "_shrinkwrap": null,
  "_spec": "electron-log@https://registry.npmjs.org/electron-log/-/electron-log-2.2.7.tgz",
  "_where": "/Users/kiera/Desktop/math-square",
  "author": {
    "name": "Alexey Prokhorov"
  },
  "bugs": {
    "url": "https://github.com/megahertz/electron-log/issues"
  },
  "dependencies": {},
  "description": "Just a very simple logging module for your Electron application",
  "devDependencies": {
    "chai": "*",
    "jscs": "*",
    "jshint": "*",
    "jshint-reporter-jscs": "*",
    "mocha": "*",
    "rewire": "*",
    "tslint": "*",
    "typescript": "*"
  },
  "files": [
    "index.js",
    "main.js",
    "renderer.js",
    "lib/**/*.js",
    "!lib/**/*.spec.js",
    "electron-log.d.ts"
  ],
  "homepage": "https://github.com/megahertz/electron-log#readme",
  "keywords": [
    "electron",
    "atom",
    "log",
    "logger",
    "logging",
    "windows",
    "mac",
    "osx",
    "linux",
    "desktop"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "electron-log",
  "optionalDependencies": {},
  "readme": "# electron-log\n[![Build Status](https://travis-ci.org/megahertz/electron-log.svg?branch=master)](https://travis-ci.org/megahertz/electron-log)\n[![NPM version](https://badge.fury.io/js/electron-log.svg)](https://badge.fury.io/js/electron-log)\n[![Dependencies status](https://david-dm.org/megahertz/electron-log/status.svg)](https://david-dm.org/megahertz/electron-log)\n\n## Description\n\nJust a simple logging module for your Electron or NW.js application.\nNo dependencies. No complicated configuration. Just require and use.\nIt can be used without Electron.\n\nBy default it writes logs to the following locations:\n\n * **on Linux:** `~/.config/<app name>/log.log`\n * **on OS X:** `~/Library/Logs/<app name>/log.log`\n * **on Windows:** `%USERPROFILE%\\AppData\\Roaming\\<app name>\\log.log`\n\n## Installation\n\nInstall with [npm](https://npmjs.org/package/electron-log):\n\n    npm install electron-log\n\n## Usage\n\n```js\nvar log = require('electron-log');\n\nlog.info('Hello, log');\n```\n### Log levels\n\nelectron-log supports the following log levels:\n\n    error, warn, info, verbose, debug, silly\n\n### Transport\n\nTransport is a simple function which requires an object which describes\na message. By default, two transports are active: console and file.\nPlease be aware that the file log level is 'warn' by default, so info\nand debug messages will be filtered. The file path is dependent on the\ncurrent platform.\n\n\n\n#### Disable default transport:\n\n```js\nlog.transports.file.level = false;\nlog.transports.console.level = false;\n```\n    \n#### Override transport:\n\n```js\nvar format = require('util');\n\nlog.transports.console = function(msg) {\n  var text = util.format.apply(util, msg.data);\n  console.log(`[${msg.date.toLocaleTimeString()} ${msg.level}] ${text}`);\n};\n```\nPlease be aware that if you override a transport function the default\ntransport options (like level or format) will be undefined.\n    \n#### Console Transport\n\n```js\n// Log level\nlog.transports.console.level = 'warn';\n\n/** \n * Set output format template. Available variables:\n * Main: {level}, {text}\n * Date: {y},{m},{d},{h},{i},{s},{ms}\n */\nlog.transports.console.format = '{h}:{i}:{s}:{ms} {text}';\n\n// Set a function which formats output\nlog.transports.console.format = (msg) => util.format.apply(util, msg.data);\n```\n\n#### Renderer Console transport\nShow logs in Chromium DevTools Console. It has the same options as\nconsole transport.\n\n#### File transport\n\n```js\n// Same as for console transport\nlog.transports.file.level = 'warn';\nlog.transports.file.format = '{h}:{i}:{s}:{ms} {text}';\n\n// Set approximate maximum log size in bytes. When it exceeds,\n// the archived log will be saved as the log.old.log file\nlog.transports.file.maxSize = 5 * 1024 * 1024;\n\n// Write to this file, must be set before first logging\nlog.transports.file.file = __dirname + '/log.txt';\n\n// fs.createWriteStream options, must be set before first logging\nlog.transports.file.streamConfig = { flags: 'w' };\n\n// set existed file stream\nlog.transports.file.stream = fs.createWriteStream('log.txt');\n```\n\nBy default, file transport reads a productName or name property from\npackage.json to determine a log path like\n`~/.config/<app name>/log.log`. If you have no package.json or you want\nto specify another path, just set the appName property:\n\n```js\nlog.transports.file.appName = 'test';\n```\nThis value should be set before the first log method call.\n\n## Renderer process\n\nSince version 2.0.0 this package works differently in main and renderer\nprocesses. When it's included in a renderer process it sends logs to\nthe main process through IPC. There are no API changes, you can still\nrequire the package by the same way both in main and renderer processes,\nbut please be aware that transport configuration is available only\ninside the main process.\n\n## Change Log\n\n**2.1.0**\n - Add Renderer Console transport\n\n**2.0.0**\n - Move log.appName property to log.transports.file.appName.\n - Change a log message object. See updated\n [Override transport section](#override-transport) if you use a custom\n transport.\n - Now it's not possible to configure transports from a renderer\n process, only from the main.\n - To disable a transport set its level to false.\n - Fix problems when this package is used from a renderer process.\n - Add Typescript definitions.\n - Add [log-s](https://github.com/megahertz/log-s) transport\n (experimental).\n - Fix file transport appName detection when an application is run\n in dev environment (through `electron .` or similar way)\n\n**1.3.0**\n\n- #18 Rename 'warning' log level to 'warn'\n\n**1.2.0**\n\n - #14 Use native console levels instead of console.log\n \n**1.0.16**\n\n - Prefer to use package.json:productName instead of package.json:name\n to determine a log path.\n\n## License\n\nLicensed under MIT.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/megahertz/electron-log.git"
  },
  "scripts": {
    "jscs": "jscs .",
    "jshint": "jshint --exclude ./node_modules,./test-projects . --verbose",
    "mocha": "mocha index.spec.js lib/{,**/}{,**/}*.spec.js",
    "test": "npm run jshint && npm run jscs && npm run tslint && npm run mocha && npm run test-projects",
    "test-projects": "mocha test-projects/**/*.spec.js",
    "test-projects-install": "node test-projects/install.js",
    "tslint": "tslint electron-log.d.ts"
  },
  "typings": "./electron-log.d.ts",
  "version": "2.2.7"
}
